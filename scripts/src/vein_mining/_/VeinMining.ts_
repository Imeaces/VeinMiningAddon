import { MinecraftSystem, Minecraft, dim, Location } from "yoni-mcscripts-lib";

/*****************************
 ****     Types          *****
 *****************************/

export interface VeinBlockChange {
    type: VeinBlockChangeType
    data: any
}
export interface VeinMiningBlockGetter {
    next(): Minecraft.Block;
    hasNext(): boolean;
}
export interface VeinMiningBlocks {
    next(count: number): Minecraft.Block[];
    hasMore(): boolean;
}
export interface VeinBlockChangeProcessor {
    changeBlock(block: Minecraft.Block, contexts: VeinContextSet): VeinBlockChange[]
}

export enum VeinBlockChangeType {
    replaceBlock,
    removeBlock,
    lootItem,
    lootXp,
}
export interface VeinContext {
    contextData: any
    onChange(change: VeinBlockChange): VeinBlockChange | null;
}

export interface VeinMiningApplier {
     applyChanges(changes: VeinBlockChange[]): void
}

export interface SelfEffecting {
    affectSelf(change?: VeinBlockChange): boolean;
}


/*****************************
 ********     Utils     ******
 *****************************/


export class VeinMiningError extends Error {
}

export class VeinMiningToolChangedError extends VeinMiningError {}

export class VeinMiningToolTypeChangedError extends VeinMiningToolChangedError {
    constructor(oldType: Minecraft.ItemType | null, newType: Minecraft.ItemType | null){
        super();
    }
}

/**
 * 用于异步、分时段地遍及 VeinMiningBlocks，使处理连锁采集的过程尽量不对游戏造成过多的卡顿。
 */
class VeinMiningBlocksTimeOptimizedIterator implements AsyncIterableIterator<Minecraft.Block[]> {
    perTickMaxTimeMs: number;
    timer: ExecutingTimer;
    veinBlocks: VeinMiningBlocks;
    countPerYileds: number;
    constructor(veinBlocks: VeinMiningBlocks, countPerYileds: number, perTickMaxTimeMs: number){
        this.perTickMaxTimeMs = perTickMaxTimeMs;
        this.veinBlocks = veinBlocks;
        this.countPerYileds = countPerYileds;
        this.timer = new ExecutingTimer(this.perTickMaxTimeMs);
    }
    async*[Symbol.asyncIterator](): AsyncIterableIterator<Minecraft.Block[]> {
        //我tm同一个过程写两份代码
        
        do {
            this.timer.handle();
            yield this.veinBlocks.next(this.countPerYileds);
            this.timer.unhandle();
            if (this.timer.isTimeLimitExceed()){
                await idle(1);
                this.countPerYileds = Math.max(VeinMiningBlocksTimeOptimizedIterator.minCountPerYields, this.countPerYileds - VeinMiningBlocksTimeOptimizedIterator.minCountPerYields);
            }
        } while (this.veinBlocks.hasMore());
    }
    #hasCompleted: boolean = false;
    async next(): Promise<IteratorResult<Minecraft.Block[]>> {
        if (this.timer.isHandled)
            this.timer.unhandle();
            
        if (this.timer.isTimeLimitExceed()){
            await idle(1);
            this.countPerYileds = Math.max(VeinMiningBlocksTimeOptimizedIterator.minCountPerYields, this.countPerYileds - VeinMiningBlocksTimeOptimizedIterator.minCountPerYields);
        }
        
        if (!this.#hasCompleted && this.veinBlocks.hasMore()){
            this.timer.handle();
            return { done: false, value: this.veinBlocks.next(this.countPerYileds) };
        }
        
        this.#hasCompleted = true;
        return { done: true, value: undefined };
    }
    static minCountPerYields = 20;
}

class VeinContextSet {
    constructor(contexts: VeinContext[]){
        this.contexts = contexts;
    }
    [Symbol.iterator](){
        return this.contexts[Symbol.iterator]();
    }
    contexts: VeinContext[]
    hasContextData(data: any): boolean {
        const value = this.contexts.find(c => c.contextData === data);
        if (value != undefined)
            this.#cache = { data, value };
        return value != undefined;
    }
    #cache: undefined | { data: any, value: VeinContext };
    getContextByData(data: any): VeinContext {
        if (this.#cache != undefined){
            const { value, data: data0 } = this.#cache;
            this.#cache = undefined;
            if (data0 === data){
                return value;
            }
        }
        const value = this.contexts.find(c => c.contextData === data);
        if (value == undefined)
            throw new Error("no such context");
        return value;
    }
}

/*****************************
 ********     Main     ******
 *****************************/

/**
 * 用于处理改变一系列方块的操作。
 */
export class VeinMining {
    veinBlocks: VeinMiningBlocks = null as any;
    blockChanger: VeinBlockChangeProcessor = null as any;
    contexts: VeinContextSet = null as any;
    selfEffects: SelfEffecting = null as any;
    changeApplier: VeinMiningApplier = null as any;
    async runAsync(){
        const veinBlocksIterator = new VeinMiningBlocksTimeOptimizedIterator(this.veinBlocks, 100, 8);
        
        for await (const veinBlocks of veinBlocksIterator)
        for (const block of veinBlocks){
            let changes = this.blockChanger.changeBlock(block, this.contexts);
            let modifiedChanges = [];
            
            ChangeContextResolveing:
            for (let change of changes){
                for (const context of this.contexts){
                    change = context.onChange(change) as VeinBlockChange;
                    if (change == null)
                        continue ChangeContextResolveing;
                }
                modifiedChanges.push(change);
            }
            
            if (this.selfEffects.affectSelf())
                this.changeApplier.applyChanges(modifiedChanges);
            else
                throw new VeinMiningError("Self Effect Failed");
        }
    }
}

/*****************************
 ****     Instances     ******
 *****************************/

/*
class OreBlockProcessor implements VeinBlockChangeProcessor {
    constructor(){
    }
    dropMappings = new Map<Minecraft.Block, Minecraft.ItemStack[]>(
    );
    getDrops(ore: Minecraft.Block): Minecraft.ItemStack[] {
        return this.dropMappings.get(ore) ?? [];
    }
    changeBlock(ore: Minecraft.Block){
        return ([] as VeinBlockChange[]).concat(
        
            this.getDrops(ore).map(item => {
                return {
                    type: VeinBlockChangeType.lootItem,
                    data: item
                };
            }),
        
        );
    }
}
*/

class CenterAroundVeinBlocks implements VeinMiningBlocks {
    constructor(blockTypes: Minecraft.BlockType[], center: Location){
        this.detectingBlocks.push(center.getBlock());
        this.blockTypes = blockTypes;
    }
    blockTypes: Minecraft.BlockType[];
    next(count: number = 10): Minecraft.Block[] {
        const { detectingBlocks } = this;
        const blocks: Minecraft.Block[] = [];
        while (blocks.length < count && detectingBlocks.length > 0){
             let oneDetectingBlock = detectingBlocks.shift() as Minecraft.Block;
             let aroundBlocks = CenterAroundVeinBlocks.getAroundBlocks(oneDetectingBlock);
             let undetectBlocks = aroundBlocks.filter(v=>!this.has(v));
             let targetBlocks = undetectBlocks.filter(this.matchBlock);
             blocks.push(...targetBlocks);
             detectingBlocks.push(...targetBlocks);
             undetectBlocks.forEach(this.add.bind(this));
        }
        return blocks;
    }
    matchBlock(block: Minecraft.Block): boolean {
        return this.blockTypes.includes(block.type);
    }
    hasMore(): boolean {
        return this.detectingBlocks.length > 0;
    }
    blocksRecord: Record<number, Record<number, number[]>> = {};
    add(block: Minecraft.Block){
        const { blocksRecord } = this;
        
        const { x, y, z } = block;
        
        if (!(x in blocksRecord))
            blocksRecord[x] = {};
        
        if (!(y in blocksRecord[x]))
            blocksRecord[x][y] = [];
        
        blocksRecord[x][y].push(z);
    }
    has(block: Minecraft.Block): boolean {
        const { blocksRecord } = this;
        
        const { x, y, z } = block;
        return x in blocksRecord
            && y in blocksRecord[x]
            && blocksRecord[x][y].includes(z);
    }
    static getAroundBlocks(block: Minecraft.Block): Minecraft.Block[] {
        const blockLocation = new Location(block);
        return [
        blockLocation.offset(-1,0,0).getBlock(),
        blockLocation.offset(1,0,0).getBlock(),
        blockLocation.offset(0,-1,0).getBlock(),
        blockLocation.offset(0,1,0).getBlock(),
        blockLocation.offset(0,0,-1).getBlock(),
        blockLocation.offset(0,0,1).getBlock()
        ];
    }
    blocks: Minecraft.Block[] = [];
    detectingBlocks: Minecraft.Block[] = [];
}

/*****************************
 ****     Functions     ******
 *****************************/

export class ExecutingTimer {
    constructor(perTickMaxTime: number){
        this.perTickMaxTime = perTickMaxTime;
    }
    perTickMaxTime: number;
    static getCurrentTick(): number {
        return MinecraftSystem.currentTick;
    }
    #handleTick: number = -1;
    #lastQueryTime: number = Date.now();
    #passedTime: number = 0;
    #isHandled = false;
    get isHandled() {
        this.isTimeLimitExceed();
        return this.#isHandled;
    }
    handle(){
        this.unhandle();
        this.#isHandled = true;
    }
    unhandle(){
        if (this.isHandled)
            this.#isHandled = false;
    }
    isTimeLimitExceed(): boolean {
        const now = Date.now();
        if (ExecutingTimer.getCurrentTick() !== this.#handleTick){
            this.#isHandled = false;
            this.#handleTick = ExecutingTimer.getCurrentTick();
            this.#passedTime = 0;
        } else if (this.#isHandled) {
            this.#passedTime += now - this.#lastQueryTime;
        }
        this.#lastQueryTime = now;
        return this.#passedTime > this.perTickMaxTime;
    }
}

function generatePendingPromise(): { promise: Promise<void>, reject: (result: any) => void, resolve: (err?: unknown) => void } {
    let resolve: (result: any) => void, reject: (e?: unknown) => void;
    let promise: Promise<void> = new Promise((re, rj) => {
        resolve = re;
        reject = rj;
    });
    //@ts-ignore 这是基于Promise对象会在创建时就运行传入的函数而实现的
    return { promise, reject, resolve };
}

async function idle(time: number = 1){
    const { resolve, promise } = generatePendingPromise();
    MinecraftSystem.runTimeout(() => void resolve(), Math.max(0, time));
    await promise;
}